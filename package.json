{
  "name": "ecommerce-microservice-backend-app",
  "version": "1.0.0",
  "description": "<!--## Better Code Hub\r I analysed this repository according to the clean code standards on [Better Code Hub](https://bettercodehub.com/) just to get an independent opinion of how bad the code is. Surprisingly, the compliance score is high!\r -->\r ## Introduction\r - This project is a development of a small set of **Spring Boot** and **Cloud** based Microservices projects that implement cloud-native intuitive, Reactive Programming, Event-driven, Microservices design patterns, and coding best practices.\r - The project follows **CloudNative**<!--(https://www.cncf.io/)--> recommendations and The [**twelve-factor app**](https://12factor.net/) methodology for building *software-as-a-service apps* to show how μServices should be developed and deployed.\r - This project uses cutting edge technologies like Docker, Kubernetes, Elasticsearch Stack for\r  logging and monitoring, Java SE 11, H2, and MySQL databases, all components developed with TDD in mind, covering integration & performance testing, and many more.\r  - This project is going to be developed as stages, and all such stage steps are documented under\r   the project **e-Commerce-boot μServices** **README** file <!--[wiki page](https://github.com/mohamed-taman/Springy-Store-Microservices/wiki)-->.\r ---\r ## Getting started\r ### System components Structure\r Let's explain first the system structure to understand its components:\r ```\r ecommerce-microservice-backend-app [μService] --> Parent folder.\r |- docs --> All docs and diagrams.\r |- k8s --> All **Kubernetes** config files.\r     |- proxy-client --> Authentication & Authorization µService, exposing all \r     |- api-gateway --> API Gateway server\r     |- service-discovery --> Service Registery server\r     |- cloud-config --> Centralized Configuration server\r     |- user-service --> Manage app users (customers & admins) as well as their credentials\r     |- product-service --> Manage app products and their respective categories\r     |- favourite-service --> Manage app users' favourite products added to their own favourite list\r     |- order-service --> Manage app orders based on carts\r     |- shipping-service --> Manage app order-shipping products\r     |- payment-service --> Manage app order payments\r |- compose.yml --> contains all services landscape with Kafka  \r |- run-em-all.sh --> Run all microservices in separate mode. \r |- setup.sh --> Install all shared POMs and shared libraries. \r |- stop-em-all.sh --> Stop all services runs in standalone mode. \r |- test-em-all.sh --> This will start all docker compose landscape and test them, then shutdown docker compose containers with test finishes (use switch start stop)\r ```\r Now, as we have learned about different system components, then let's start.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "release": "semantic-release"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@semantic-release/changelog": "^6.0.3",
    "@semantic-release/git": "^10.0.1",
    "@semantic-release/github": "^11.0.3",
    "semantic-release": "^24.2.5"
  }
}
