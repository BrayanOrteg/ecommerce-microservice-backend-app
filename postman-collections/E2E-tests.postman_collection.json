{
	"info": {
		"_postman_id": "e02a92a2-c22b-4eea-a92a-5a5ed454db0b",
		"name": "E2E-tests",
		"description": "Merged collection containing E2E and E2E-tests collections for comprehensive end-to-end testing of the ecommerce microservice backend application.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37433479"
	},	"item": [
		{
			"name": "Create an user, credential, category and multiple products",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdUserResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " { \r\n    \"firstName\": \"Alejandro\", \r\n    \"lastName\": \"Cordoba\", \r\n    \"imageUrl\": \"{{$randomUrl}}\", \r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"phone\": \"{{$randomPhoneNumber}}\",\r\n    \"addressDtos\": [\r\n        {\r\n            \"fullAddress\": \"123 Main St\", \r\n            \"postalCode\": \"12345\", \r\n            \"city\": \"New York\"\r\n        }\r\n    ], \r\n    \"credential\": { \r\n        \"username\": \"johndoe\", \r\n        \"password\": \"securePassword123\", \r\n        \"roleBasedAuthority\": \"ROLE_USER\", \r\n        \"isEnabled\": true, \r\n        \"isAccountNonExpired\": true, \r\n        \"isAccountNonLocked\": true, \r\n        \"isCredentialsNonExpired\": true \r\n    }\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}user-service/api/users",
							"protocol": "http",
							"host": [
								"{{base_url}}user-service"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Credential",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let user = JSON.parse(pm.collectionVariables.get(\"createdUserResponse\"));\r",
									"\r",
									"// Datos del usuario\r",
									"pm.environment.set(\"userId\", user.userId);\r",
									"pm.environment.set(\"firstName\", user.firstName);\r",
									"pm.environment.set(\"lastName\", user.lastName);\r",
									"pm.environment.set(\"imageUrl\", user.imageUrl);\r",
									"pm.environment.set(\"email\", user.email);\r",
									"pm.environment.set(\"phone\", user.phone);\r",
									"\r",
									"// Datos de la credencial\r",
									"pm.environment.set(\"credentialId\", user.credential.credentialId);\r",
									"pm.environment.set(\"username\", user.credential.username);\r",
									"pm.environment.set(\"password\", user.credential.password);\r",
									"pm.environment.set(\"roleBasedAuthority\", user.credential.roleBasedAuthority);\r",
									"pm.environment.set(\"isEnabled\", user.credential.isEnabled);\r",
									"pm.environment.set(\"isAccountNonExpired\", user.credential.isAccountNonExpired);\r",
									"pm.environment.set(\"isAccountNonLocked\", user.credential.isAccountNonLocked);\r",
									"pm.environment.set(\"isCredentialsNonExpired\", user.credential.isCredentialsNonExpired);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdCredentialResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"credentialId\": {{credentialId}},\r\n    \"username\": \"{{username}}\",\r\n    \"password\": \"{{password}}\",\r\n    \"roleBasedAuthority\": \"{{roleBasedAuthority}}\",\r\n    \"isEnabled\": {{isEnabled}},\r\n    \"isAccountNonExpired\": {{isAccountNonExpired}},\r\n    \"isAccountNonLocked\": {{isAccountNonLocked}},\r\n    \"isCredentialsNonExpired\": {{isCredentialsNonExpired}},\r\n    \"user\": {\r\n        \"userId\": {{userId}},\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"imageUrl\": \"{{imageUrl}}\",\r\n        \"email\": \"{{email}}\",\r\n        \"phone\": \"{{phone}}\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}user-service/api/credentials",
							"protocol": "http",
							"host": [
								"{{base_url}}user-service"
							],
							"path": [
								"api",
								"credentials"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdCategoryResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"categoryTitle\": \"Gaming Computer\",\r\n    \"imageUrl\": \"{{$randomUrl}}\",\r\n    \"parentCategory\": {\r\n        \"categoryId\": 1,\r\n        \"categoryTitle\": \"Computer\",\r\n        \"imageUrl\": null\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}product-service/api/categories",
							"protocol": "http",
							"host": [
								"{{base_url}}product-service"
							],
							"path": [
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdProductResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " { \r\n    \"productTitle\": \"lenovo legion\", \r\n    \"imageUrl\": \"{{$randomUrl}}\", \r\n    \"sku\": \"{{$randomAlphaNumeric}}\",\r\n    \"priceUnit\": {{$randomPrice}},\r\n    \"quantity\": {{$randomInt}},\r\n    \"category\": {{createdCategoryResponse}}\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}product-service/api/products",
							"protocol": "http",
							"host": [
								"{{base_url}}product-service"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdProduct2Response\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {  \r\n    \"productTitle\": \"hp omen\", \r\n    \"imageUrl\": \"{{$randomUrl}}\", \r\n    \"sku\": \"{{$randomAlphaNumeric}}\",\r\n    \"priceUnit\": {{$randomPrice}},\r\n    \"quantity\": {{$randomInt}},\r\n    \"category\": {{createdCategoryResponse}}\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}product-service/api/products",
							"protocol": "http",
							"host": [
								"{{base_url}}product-service"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Product 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(201);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdProduct3Response\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " { \r\n    \"productTitle\": \"hp victus\", \r\n    \"imageUrl\": \"{{$randomUrl}}\", \r\n    \"sku\": \"{{$randomAlphaNumeric}}\",\r\n    \"priceUnit\": {{$randomPrice}},\r\n    \"quantity\": {{$randomInt}},\r\n    \"category\": {{createdCategoryResponse}}\r\n }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}product-service/api/products",
							"protocol": "http",
							"host": [
								"{{base_url}}product-service"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userJson = JSON.parse(pm.collectionVariables.get(\"createdUserResponse\"));\r",
									"\r",
									"pm.environment.set(\"userId\", userJson.userId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{base_url}}user-service/api/users/{{userId}}",
							"protocol": "http",
							"host": [
								"{{base_url}}user-service"
							],
							"path": [
								"api",
								"users",
								"{{userId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const products = pm.response.json().collection;\r",
									"\r",
									"pm.test('\"lenovo legion\" exists', function () {\r",
									"    const found = products.some(p => p.productTitle === \"lenovo legion\");\r",
									"    pm.expect(found).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('\"hp omen\" exists', function () {\r",
									"    const found = products.some(p => p.productTitle === \"hp omen\");\r",
									"    pm.expect(found).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test('\"hp victus\" exists', function () {\r",
									"    const found = products.some(p => p.productTitle === \"hp victus\");\r",
									"    pm.expect(found).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{base_url}}product-service/api/products",
							"protocol": "http",
							"host": [
								"{{base_url}}product-service"
							],
							"path": [
								"api",
								"products"
							]
						}
					},
					"response": []
				}
			],
			"description": "Vamos a crear un usuario y una creedencial ya que sin una creedencial no podemos hacer un findAll por la reelación bidireccional entre servicios. Además crearemos 3 productos, validando que hayan sido creados junto con el usuario"
		},
		{
			"name": "Make a payment",
			"item": [
				{
					"name": "Create Cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdCartResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userJson = JSON.parse(pm.collectionVariables.get(\"createdUserResponse\"));\r",
									"\r",
									"pm.environment.set(\"userId\", userJson.userId);\r",
									"pm.environment.set(\"firstName\", userJson.firstName);\r",
									"pm.environment.set(\"lastName\", userJson.lastName);\r",
									"pm.environment.set(\"imageUrl\", userJson.imageUrl);\r",
									"pm.environment.set(\"email\", userJson.email);\r",
									"pm.environment.set(\"phone\", userJson.phone);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"userId\": {{userId}},\r\n    \"user\": {\r\n        \"userId\": {{userId}},\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"imageUrl\": \"{{imageUrl}}\",\r\n        \"email\": \"{{email}}\",\r\n        \"phone\": \"{{phone}}\"\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}order-service/api/carts",
							"protocol": "http",
							"host": [
								"{{base_url}}order-service"
							],
							"path": [
								"api",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Order",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userJson = JSON.parse(pm.collectionVariables.get(\"createdUserResponse\"));\r",
									"let cartJson = JSON.parse(pm.collectionVariables.get(\"createdCartResponse\"));\r",
									"\r",
									"pm.environment.set(\"userId\", userJson.userId);\r",
									"pm.environment.set(\"cartId\", cartJson.cartId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdOrderResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"orderDate\": \"23-05-2025__02:05:55:547092\",\r\n    \"orderDesc\": \"{{$randomLoremWord}}\",\r\n    \"orderFee\": {{$randomPrice}},\r\n    \"cart\": {\r\n        \"cartId\": {{cartId}},\r\n        \"userId\": {{userId}}\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}order-service/api/orders",
							"protocol": "http",
							"host": [
								"{{base_url}}order-service"
							],
							"path": [
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// 1. Valor booleano aleatorio\r",
									"let isPayed = Math.random() < 0.5; // true o false\r",
									"\r",
									"// 2. Selección condicional del status\r",
									"let status = \"\";\r",
									"\r",
									"if (isPayed) {\r",
									"    // Si pagado, solo puede ser COMPLETED\r",
									"    status = \"COMPLETED\";\r",
									"} else {\r",
									"    // Si no está pagado, elegir aleatoriamente entre NOT_STARTED o IN_PROGRESS\r",
									"    let options = [\"NOT_STARTED\", \"IN_PROGRESS\"];\r",
									"    status = options[Math.floor(Math.random() * options.length)];\r",
									"}\r",
									"\r",
									"// 3. Guardar ambos como variables de entorno o colección\r",
									"pm.environment.set(\"isPayed\", isPayed);\r",
									"pm.environment.set(\"paymentStatus\", status);\r",
									"\r",
									"let orderJson = JSON.parse(pm.collectionVariables.get(\"createdOrderResponse\"));\r",
									"\r",
									"pm.environment.set(\"orderId\", orderJson.orderId);\r",
									"pm.environment.set(\"orderDate\", orderJson.orderDate);\r",
									"pm.environment.set(\"orderDesc\", orderJson.orderDesc);\r",
									"pm.environment.set(\"orderFee\", orderJson.orderFee);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdPaymentResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"isPayed\": {{isPayed}},\r\n    \"paymentStatus\": \"{{paymentStatus}}\",\r\n    \"order\": {\r\n        \"orderId\": {{orderId}},\r\n        \"orderDate\": \"{{orderDate}}\",\r\n        \"orderDesc\": \"{{orderDesc}}\",\r\n        \"orderFee\": {{orderFee}}\r\n    }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}payment-service/api/payments",
							"protocol": "http",
							"host": [
								"{{base_url}}payment-service"
							],
							"path": [
								"api",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Payment",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let paymentJson = JSON.parse(pm.collectionVariables.get(\"createdPaymentResponse\"));\r",
									"\r",
									"pm.environment.set(\"paymentId\", paymentJson.paymentId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{base_url}}payment-service/api/payments/{{paymentId}}",
							"protocol": "http",
							"host": [
								"{{base_url}}payment-service"
							],
							"path": [
								"api",
								"payments",
								"{{paymentId}}"
							]
						}
					},
					"response": []
				}
			],
			"description": "Retomando nuestro usuario creado le vamos a crear un carrito, con ese carrito vamos a crear una orden y con una orden vamos a generar un pago, revisando que el pago haya sido adecuadamente creado"
		},
		{
			"name": "Create, update and delete shipping",
			"item": [
				{
					"name": "Create Shipping",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Obtener las variables de producto y orden\r",
									"const product = JSON.parse(pm.collectionVariables.get(\"createdProductResponse\"));\r",
									"const order = JSON.parse(pm.collectionVariables.get(\"createdOrderResponse\"));\r",
									"\r",
									"// Construir el objeto shipping\r",
									"const shippingPayload = {\r",
									"    productId: product.productId,\r",
									"    orderId: order.orderId,\r",
									"    orderedQuantity: 2, // puedes cambiar esta cantidad si es necesario\r",
									"    product: {\r",
									"        productId: product.productId,\r",
									"        productTitle: product.productTitle,\r",
									"        imageUrl: product.imageUrl,\r",
									"        sku: product.sku,\r",
									"        priceUnit: product.priceUnit,\r",
									"        quantity: product.quantity\r",
									"    },\r",
									"    order: {\r",
									"        orderId: order.orderId,\r",
									"        orderDate: order.orderDate,\r",
									"        orderDesc: order.orderDesc,\r",
									"        orderFee: order.orderFee\r",
									"    }\r",
									"};\r",
									"\r",
									"// Guardar el payload como variable temporal para el cuerpo de la solicitud\r",
									"pm.variables.set(\"shippingPayload\", JSON.stringify(shippingPayload, null, 2));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdShippingResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{shippingPayload}}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}shipping-service/api/shippings",
							"protocol": "http",
							"host": [
								"{{base_url}}shipping-service"
							],
							"path": [
								"api",
								"shippings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Shipping",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const shipping = JSON.parse(pm.collectionVariables.get(\"createdShippingResponse\"));\r",
									"\r",
									"shipping.orderedQuantity = 3; \r",
									"\r",
									"pm.variables.set(\"updatedShippingPayload\", JSON.stringify(shipping, null, 2));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"updatedShippingResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{updatedShippingPayload}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}shipping-service/api/shippings",
							"protocol": "http",
							"host": [
								"{{base_url}}shipping-service"
							],
							"path": [
								"api",
								"shippings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Obtener el shipping actualizado\r",
									"const updatedShipping = JSON.parse(pm.collectionVariables.get(\"createdShippingResponse\"));\r",
									"\r",
									"// Obtener la colección de la respuesta\r",
									"const shippingCollection = pm.response.json().collection;\r",
									"\r",
									"// Buscar la entrada con el mismo productId y orderId\r",
									"const match = shippingCollection.find(s => \r",
									"    s.productId === updatedShipping.productId &&\r",
									"    s.orderId === updatedShipping.orderId\r",
									");\r",
									"\r",
									"// Asegurar que existe\r",
									"pm.test(\"Shipping actualizado encontrado\", function () {\r",
									"    pm.expect(match).to.not.be.undefined;\r",
									"});\r",
									"\r",
									"// Validar que el orderedQuantity sea igual a 3\r",
									"pm.test(\"orderedQuantity actualizado correctamente\", function () {\r",
									"    pm.expect(match.orderedQuantity).to.eql(3);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://{{base_url}}shipping-service/api/shippings",
							"protocol": "http",
							"host": [
								"{{base_url}}shipping-service"
							],
							"path": [
								"api",
								"shippings"
							]
						}
					},
					"response": []
				}
			],
			"description": "Vamos a testear todo el CRUD de envios, el cual será creado a partir de la orden creada en el paso anterior y el producto 1 creado en la primera prueba, validando que haya sido actualizada y eliminada"
		},
		{
			"name": "Add multiple fav products and remove one",
			"item": [
				{
					"name": "Add Fav 1",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Obtener y parsear las variables del entorno\r",
									"let userJson = JSON.parse(pm.collectionVariables.get(\"createdUserResponse\"));\r",
									"let productJson = JSON.parse(pm.collectionVariables.get(\"createdProductResponse\"));\r",
									"\r",
									"// Setear las variables necesarias para el body\r",
									"pm.environment.set(\"userId\", userJson.userId);\r",
									"pm.environment.set(\"firstName\", userJson.firstName);\r",
									"pm.environment.set(\"lastName\", userJson.lastName);\r",
									"pm.environment.set(\"imageUrl\", userJson.imageUrl);\r",
									"pm.environment.set(\"email\", userJson.email);\r",
									"pm.environment.set(\"phone\", userJson.phone);\r",
									"\r",
									"pm.environment.set(\"productId\", productJson.productId);\r",
									"pm.environment.set(\"productTitle\", productJson.productTitle);\r",
									"pm.environment.set(\"productImageUrl\", productJson.imageUrl);\r",
									"pm.environment.set(\"sku\", productJson.sku);\r",
									"pm.environment.set(\"priceUnit\", productJson.priceUnit);\r",
									"pm.environment.set(\"quantity\", productJson.quantity);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdFavResponse\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"productId\": {{productId}},\r\n  \"likeDate\": \"23-05-2025__22:15:30:360374\",\r\n  \"user\": {\r\n    \"userId\": {{userId}},\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"imageUrl\": \"{{imageUrl}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"phone\": \"{{phone}}\"\r\n  },\r\n  \"product\": {\r\n    \"productId\": {{productId}},\r\n    \"productTitle\": \"{{productTitle}}\",\r\n    \"imageUrl\": \"{{productImageUrl}}\",\r\n    \"sku\": \"{{sku}}\",\r\n    \"priceUnit\": {{priceUnit}},\r\n    \"quantity\": {{quantity}}\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}favourite-service/api/favourites",
							"protocol": "http",
							"host": [
								"{{base_url}}favourite-service"
							],
							"path": [
								"api",
								"favourites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Fav 2",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Obtener y parsear las variables del entorno\r",
									"let userJson = JSON.parse(pm.collectionVariables.get(\"createdUserResponse\"));\r",
									"let productJson = JSON.parse(pm.collectionVariables.get(\"createdProduct2Response\"));\r",
									"\r",
									"// Setear las variables necesarias para el body\r",
									"pm.environment.set(\"userId\", userJson.userId);\r",
									"pm.environment.set(\"firstName\", userJson.firstName);\r",
									"pm.environment.set(\"lastName\", userJson.lastName);\r",
									"pm.environment.set(\"imageUrl\", userJson.imageUrl);\r",
									"pm.environment.set(\"email\", userJson.email);\r",
									"pm.environment.set(\"phone\", userJson.phone);\r",
									"\r",
									"pm.environment.set(\"productId\", productJson.productId);\r",
									"pm.environment.set(\"productTitle\", productJson.productTitle);\r",
									"pm.environment.set(\"productImageUrl\", productJson.imageUrl);\r",
									"pm.environment.set(\"sku\", productJson.sku);\r",
									"pm.environment.set(\"priceUnit\", productJson.priceUnit);\r",
									"pm.environment.set(\"quantity\", productJson.quantity);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdFavResponse2\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"productId\": {{productId}},\r\n  \"likeDate\": \"23-05-2025__22:15:30:360374\",\r\n  \"user\": {\r\n    \"userId\": {{userId}},\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"imageUrl\": \"{{imageUrl}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"phone\": \"{{phone}}\"\r\n  },\r\n  \"product\": {\r\n    \"productId\": {{productId}},\r\n    \"productTitle\": \"{{productTitle}}\",\r\n    \"imageUrl\": \"{{productImageUrl}}\",\r\n    \"sku\": \"{{sku}}\",\r\n    \"priceUnit\": {{priceUnit}},\r\n    \"quantity\": {{quantity}}\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}favourite-service/api/favourites",
							"protocol": "http",
							"host": [
								"{{base_url}}favourite-service"
							],
							"path": [
								"api",
								"favourites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Fav 3",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Obtener y parsear las variables del entorno\r",
									"let userJson = JSON.parse(pm.collectionVariables.get(\"createdUserResponse\"));\r",
									"let productJson = JSON.parse(pm.collectionVariables.get(\"createdProduct3Response\"));\r",
									"\r",
									"// Setear las variables necesarias para el body\r",
									"pm.environment.set(\"userId\", userJson.userId);\r",
									"pm.environment.set(\"firstName\", userJson.firstName);\r",
									"pm.environment.set(\"lastName\", userJson.lastName);\r",
									"pm.environment.set(\"imageUrl\", userJson.imageUrl);\r",
									"pm.environment.set(\"email\", userJson.email);\r",
									"pm.environment.set(\"phone\", userJson.phone);\r",
									"\r",
									"pm.environment.set(\"productId\", productJson.productId);\r",
									"pm.environment.set(\"productTitle\", productJson.productTitle);\r",
									"pm.environment.set(\"productImageUrl\", productJson.imageUrl);\r",
									"pm.environment.set(\"sku\", productJson.sku);\r",
									"pm.environment.set(\"priceUnit\", productJson.priceUnit);\r",
									"pm.environment.set(\"quantity\", productJson.quantity);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.collectionVariables.set(\"createdFavResponse3\", JSON.stringify(jsonData));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"userId\": {{userId}},\r\n  \"productId\": {{productId}},\r\n  \"likeDate\": \"23-05-2025__22:15:30:360374\",\r\n  \"user\": {\r\n    \"userId\": {{userId}},\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"imageUrl\": \"{{imageUrl}}\",\r\n    \"email\": \"{{email}}\",\r\n    \"phone\": \"{{phone}}\"\r\n  },\r\n  \"product\": {\r\n    \"productId\": {{productId}},\r\n    \"productTitle\": \"{{productTitle}}\",\r\n    \"imageUrl\": \"{{productImageUrl}}\",\r\n    \"sku\": \"{{sku}}\",\r\n    \"priceUnit\": {{priceUnit}},\r\n    \"quantity\": {{quantity}}\r\n  }\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{base_url}}favourite-service/api/favourites",
							"protocol": "http",
							"host": [
								"{{base_url}}favourite-service"
							],
							"path": [
								"api",
								"favourites"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check Size",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200);\r",
									"});\r",
									"\r",
									"pm.test(\"User has 3 favs\", function () {\r",
									"    const jsonResponse = pm.response.json();\r",
									"    const collection = jsonResponse.collection || [];\r",
									"\r",
									"    // Filtra por userId === 5\r",
									"    const favoritosUsuario = collection.filter(item => item.userId === 5);\r",
									"\r",
									"    // Verifica que la longitud sea exactamente 3\r",
									"    pm.expect(favoritosUsuario.length).to.eql(3);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://{{base_url}}favourite-service/api/favourites",
							"protocol": "http",
							"host": [
								"{{base_url}}favourite-service"
							],
							"path": [
								"api",
								"favourites"
							]
						}
					},
					"response": []
				}
			],
			"description": "Vamos a añadir los 3 productos que creamos en la primera prueba a los favoritos de nuestro usuario, vamos a validar que su colección de favoritos sea de tamaño 3, luego vamos a borrar el producto favorito 2 y revisamos que el tamaño haya disminuido"
		},
		{
			"name": "Validate user",
			"item": [
				{
					"name": "Get credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {",
									"    pm.expect(pm.response.code).equals(200)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user-service/api/credentials",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-service",
								"api",
								"credentials"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {",
									"    pm.expect(pm.response.code).equals(200)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user-service/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-service",
								"api",
								"users"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get user 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {",
									"    pm.expect(pm.response.code).equals(200)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user-service/api/users/{{id_user_first}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-service",
								"api",
								"users",
								"{{id_user_first}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get credential 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {",
									"    pm.expect(pm.response.code).equals(200)",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/user-service/api/credentials/{{id_credential_first}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"user-service",
								"api",
								"credentials",
								"{{id_credential_first}}"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Create category and product",
			"item": [
				{
					"name": "Create category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"// Parsear la respuesta JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Guardar el userId en la variable de colección id_user\r",
									"pm.collectionVariables.set(\"id_category\", responseJson.categoryId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"categoryTitle\": \"Technology\", \n    \"imageUrl\": \"https://example.com/smartphones.jpg\",\n    \n    \"parentCategory\": {\n        \"categoryId\": 1,\n        \"categoryTitle\": \"Electronics\",\n        \"imageUrl\": \"https://example.com/electronics.jpg\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/product-service/api/categories",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-service",
								"api",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(201)\r",
									"});\r",
									"\r",
									"// Parsear la respuesta JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Guardar el userId en la variable de colección id_user\r",
									"pm.collectionVariables.set(\"id_product1\", responseJson.productId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"productTitle\": \"iPhone 16 Pro\",\n    \"imageUrl\": \"https://example.com/iphone15pro.jpg\",\n    \"sku\": \"IPH15PRO001\",\n    \"priceUnit\": 1299.99,\n    \"quantity\": 50,\n    \"category\":\n        {\n            \"categoryId\": {{id_category}},\n            \"categoryTitle\": \"Technology\", \n            \"imageUrl\": \"https://example.com/smartphones.jpg\",\n            \n            \"parentCategory\": {\n                \"categoryId\": {{id_category}},\n                \"categoryTitle\": \"Electronics\",\n                \"imageUrl\": \"https://example.com/electronics.jpg\"\n            }\n        }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/product-service/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-service",
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(201)\r",
									"});\r",
									"\r",
									"// Parsear la respuesta JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Guardar el userId en la variable de colección id_user\r",
									"pm.collectionVariables.set(\"id_product2\", responseJson.productId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\n    \"productTitle\": \"Xiaomi nose\",\n    \"imageUrl\": \"https://example.com/iphone15pro.jpg\",\n    \"sku\": \"XIA15PRO001\",\n    \"priceUnit\": 1299.99,\n    \"quantity\": 50,\n    \"category\":\n    {\n            \"categoryId\": {{id_category}},\n            \"categoryTitle\": \"Technology\", \n            \"imageUrl\": \"https://example.com/smartphones.jpg\",\n            \n            \"parentCategory\": {\n                \"categoryId\": {{id_category}},\n                \"categoryTitle\": \"Electronics\",\n                \"imageUrl\": \"https://example.com/electronics.jpg\"\n            }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/product-service/api/products",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-service",
								"api",
								"products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/product-service/api/categories/{{id_category}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-service",
								"api",
								"categories",
								"{{id_category}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/product-service/api/products/{{id_product1}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-service",
								"api",
								"products",
								"{{id_product1}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get product 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/product-service/api/products/{{id_product2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"product-service",
								"api",
								"products",
								"{{id_product2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Shopping cart",
			"item": [
				{
					"name": "Create cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"// Parsear la respuesta JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Guardar el userId en la variable de colección id_user\r",
									"pm.collectionVariables.set(\"id_cart\", responseJson.cartId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": {{id_user}},\n\n    \"user\": {\n        \"userId\": {{id_user}},\n        \"firstName\": \"{{firstname}}\",\n        \"lastName\": \"{{lastname}}\",\n        \"imageUrl\": \"{{imageurl}}\",\n        \"email\": \"{{email}}\",\n        \"phone\": \"{{phone}}\"\n    }\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order-service/api/carts",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order-service",
								"api",
								"carts"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"// Parsear la respuesta JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Guardar el userId en la variable de colección id_user\r",
									"pm.collectionVariables.set(\"id_order\", responseJson.orderId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderDate\": \"23-05-2025__02:05:55:547092\",\n    \"orderDesc\": \"{{$randomLoremWord}}\",\n    \"orderFee\": {{$randomPrice}},\n    \"cart\": {\n        \"cartId\": {{id_cart}},\n        \"userId\": {{id_user}}\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order-service/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order-service",
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create order 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"// Parsear la respuesta JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Guardar el userId en la variable de colección id_user\r",
									"pm.collectionVariables.set(\"id_order2\", responseJson.orderId);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"orderDate\": \"23-05-2025__02:05:55:547092\",\n    \"orderDesc\": \"{{$randomLoremWord}}\",\n    \"orderFee\": {{$randomPrice}},\n    \"cart\": {\n        \"cartId\": {{id_cart}},\n        \"userId\": {{id_user}}\n    }\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/order-service/api/orders",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order-service",
								"api",
								"orders"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/order-service/api/orders/{{id_order}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order-service",
								"api",
								"orders",
								"{{id_order}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get order 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{base_url}}/order-service/api/orders/{{id_order2}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"order-service",
								"api",
								"orders",
								"{{id_order2}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "Create payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});\r",
									"\r",
									"// Parsear la respuesta JSON\r",
									"const responseJson = pm.response.json();\r",
									"\r",
									"// Guardar el userId en la variable de colección id_user\r",
									"pm.collectionVariables.set(\"id_payment\", responseJson.paymentId);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n\r\n            \"isPayed\": false,\r\n            \"paymentStatus\": \"IN_PROGRESS\",\r\n            \"order\": {\r\n                \"orderId\": {{id_order}}\r\n            }\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/payment-service/api/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"payment-service",
								"api",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "    {\r\n            \"paymentId\": {{id_payment}},\r\n            \"isPayed\": false,\r\n            \"paymentStatus\": \"COMPLETED\",\r\n            \"order\": {\r\n                \"orderId\": {{id_order}}\r\n            }\r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/payment-service/api/payments",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"payment-service",
								"api",
								"payments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/payment-service/api/payments/{{id_payment}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"payment-service",
								"api",
								"payments",
								"{{id_payment}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Shipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": {{id_product1}},\r\n  \"orderId\": {{id_order}},\r\n  \"orderedQuantity\": 1,\r\n  \"product\": {\r\n    \"productId\": {{id_product1}}\r\n  },\r\n  \"order\": {\r\n    \"orderId\": {{id_order}}\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shipping-service/api/shippings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shipping-service",
								"api",
								"shippings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Shipping 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": {{id_product2}},\r\n  \"orderId\": {{id_order2}},\r\n  \"orderedQuantity\": 1,\r\n  \"product\": {\r\n    \"productId\": {{id_product2}}\r\n  },\r\n  \"order\": {\r\n    \"orderId\": {{id_order2}}\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shipping-service/api/shippings",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shipping-service",
								"api",
								"shippings"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Shipping",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": {{id_product1}},\r\n  \"orderId\": {{id_order}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shipping-service/api/shippings/find",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shipping-service",
								"api",
								"shippings",
								"find"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Shipping 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 (OK)\", function () {\r",
									"    pm.expect(pm.response.code).equals(200)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"productId\": {{id_product2}},\r\n  \"orderId\": {{id_order2}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/shipping-service/api/shippings/find",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"shipping-service",
								"api",
								"shippings",
								"find"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],	"variable": [
		{
			"key": "createdProductResponse",
			"value": ""
		},
		{
			"key": "createdCategoryResponse",
			"value": ""
		},
		{
			"key": "createdUserResponse",
			"value": ""
		},
		{
			"key": "createdCartResponse",
			"value": ""
		},
		{
			"key": "createdOrderResponse",
			"value": ""
		},
		{
			"key": "createdCredentialResponse",
			"value": ""
		},
		{
			"key": "createdProduct2Response",
			"value": ""
		},
		{
			"key": "createdProduct3Response",
			"value": ""
		},
		{
			"key": "createdPaymentResponse",
			"value": ""
		},
		{
			"key": "createdFavResponse2",
			"value": ""
		},
		{
			"key": "createdFavResponse3",
			"value": ""
		},
		{
			"key": "createdShippingResponse",
			"value": ""
		},
		{
			"key": "updatedShippingResponse",
			"value": ""
		},
		{
			"key": "createdFavResponse",
			"value": ""
		},
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "id_user",
			"value": "5",
			"type": "string"
		},
		{
			"key": "id_credential",
			"value": "5",
			"type": "string"
		},
		{
			"key": "id_category",
			"value": "1",
			"type": "string"
		},
		{
			"key": "id_product1",
			"value": "1",
			"type": "string"
		},
		{
			"key": "id_product2",
			"value": "1",
			"type": "string"
		},
		{
			"key": "id_cart",
			"value": "1",
			"type": "string"
		},
		{
			"key": "lastname",
			"value": "a",
			"type": "string"
		},
		{
			"key": "firstname",
			"value": "a",
			"type": "string"
		},
		{
			"key": "email",
			"value": "a",
			"type": "string"
		},
		{
			"key": "phone",
			"value": "a",
			"type": "string"
		},
		{
			"key": "imageurl",
			"value": "a",
			"type": "string"
		},
		{
			"key": "id_order",
			"value": "1",
			"type": "string"
		},
		{
			"key": "id_order2",
			"value": "1",
			"type": "string"
		},
		{
			"key": "id_user_first",
			"value": "5",
			"type": "string"
		},
		{
			"key": "id_credential_first",
			"value": "5",
			"type": "string"
		},
		{
			"key": "id_payment",
			"value": "1",
			"type": "string"
		}
	]
}