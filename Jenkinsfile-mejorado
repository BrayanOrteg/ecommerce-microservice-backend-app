pipeline {
    agent any
    
    environment {
        DOCKER_REGISTRY = "docker.io"  // Puedes cambiar a tu registro si usas uno privado
        DOCKER_NAMESPACE = "tuusuario"  // Reemplaza con tu usuario de Docker Hub o namespace
        VERSION = "0.1.0"
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')  // Crear estas credenciales en Jenkins
    }
    
    stages {
        stage('Preparar Entorno') {
            steps {
                sh '''
                echo "Verificando Java"
                java -version
                echo "Verificando Maven Wrapper"
                ./mvnw -version || { echo 'Maven Wrapper no encontrado'; exit 1; }
                echo "Verificando Docker"
                docker --version
                echo "Verificando kubectl"
                kubectl version --client || {
                  echo "Instalando kubectl"
                  curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
                  chmod +x kubectl && sudo mv kubectl /usr/local/bin/
                }
                '''
            }
        }
        
        stage('Build con Maven') {
            steps {
                sh './mvnw clean package -DskipTests'
            }
        }
        
        stage('Construir y Subir Imágenes Docker') {
            steps {
                sh 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
                
                // Servicio de Descubrimiento (Eureka)
                sh '''
                cd service-discovery
                docker build -t $DOCKER_NAMESPACE/service-discovery-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/service-discovery-ecommerce-boot:$VERSION
                '''
                
                // Cloud Config
                sh '''
                cd cloud-config
                docker build -t $DOCKER_NAMESPACE/cloud-config-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/cloud-config-ecommerce-boot:$VERSION
                '''
                
                // API Gateway
                sh '''
                cd api-gateway
                docker build -t $DOCKER_NAMESPACE/api-gateway-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/api-gateway-ecommerce-boot:$VERSION
                '''
                
                // Microservicios de negocio
                sh '''
                # Order Service
                cd order-service
                docker build -t $DOCKER_NAMESPACE/order-service-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/order-service-ecommerce-boot:$VERSION
                
                # Payment Service
                cd ../payment-service
                docker build -t $DOCKER_NAMESPACE/payment-service-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/payment-service-ecommerce-boot:$VERSION
                
                # Product Service
                cd ../product-service
                docker build -t $DOCKER_NAMESPACE/product-service-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/product-service-ecommerce-boot:$VERSION
                
                # Shipping Service
                cd ../shipping-service
                docker build -t $DOCKER_NAMESPACE/shipping-service-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/shipping-service-ecommerce-boot:$VERSION
                
                # User Service
                cd ../user-service
                docker build -t $DOCKER_NAMESPACE/user-service-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/user-service-ecommerce-boot:$VERSION
                
                # Favourite Service
                cd ../favourite-service
                docker build -t $DOCKER_NAMESPACE/favourite-service-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/favourite-service-ecommerce-boot:$VERSION
                
                # Proxy Client
                cd ../proxy-client
                docker build -t $DOCKER_NAMESPACE/proxy-client-ecommerce-boot:$VERSION .
                docker push $DOCKER_NAMESPACE/proxy-client-ecommerce-boot:$VERSION
                '''
                
                sh 'docker logout'
            }
        }
        
        stage('Desplegar Infraestructura') {
            steps {
                // Desplegar Zipkin
                sh 'kubectl apply -f k8s/zipkin.yaml'
                sh 'sleep 30' // Dar tiempo para que se inicie
                
                // Desplegar Service Discovery (Eureka)
                sh 'kubectl apply -f k8s/service-discovery-mejorado.yaml'
                sh 'sleep 60' // Dar tiempo para que se inicie
                
                // Verificar que Service Discovery está listo
                sh '''
                READY=false
                for i in {1..12}; do
                  if kubectl get pods -l app=service-discovery -o jsonpath='{.items[0].status.conditions[?(@.type=="Ready")].status}' | grep -q "True"; then
                    READY=true
                    break
                  fi
                  echo "Esperando a que Service Discovery esté listo..."
                  sleep 10
                done
                if [ "$READY" = false ]; then
                  echo "Service Discovery no está listo después de 2 minutos"
                  exit 1
                fi
                '''
                
                // Desplegar Cloud Config
                sh 'kubectl apply -f k8s/cloud-config-mejorado.yaml'
                sh 'sleep 60' // Dar tiempo para que se inicie
            }
        }
        
        stage('Desplegar Microservicios') {
            steps {
                // Desplegar API Gateway y esperar
                sh 'kubectl apply -f k8s/api-gateway-mejorado.yaml'
                sh 'sleep 60' // Dar tiempo para que se inicie
                
                // Desplegar el resto de microservicios
                sh '''
                kubectl apply -f k8s/order-service-mejorado.yaml
                kubectl apply -f k8s/payment-service.yaml
                kubectl apply -f k8s/product-service.yaml
                kubectl apply -f k8s/shipping-service.yaml
                kubectl apply -f k8s/user-service.yaml
                kubectl apply -f k8s/favourite-service.yaml
                kubectl apply -f k8s/proxy-client.yaml
                '''
            }
        }
        
        stage('Verificar Despliegue') {
            steps {
                sh '''
                echo "Verificando pods desplegados..."
                kubectl get pods
                
                echo "Verificando servicios..."
                kubectl get services
                
                echo "Verificando que Service Discovery esté funcionando..."
                SERVICE_DISCOVERY_URL=$(minikube service service-discovery --url || kubectl get service service-discovery -o jsonpath='{.spec.clusterIP}')
                curl -s $SERVICE_DISCOVERY_URL:8761/actuator/health | grep "UP" || echo "Service Discovery health check falló"
                
                echo "Verificando que API Gateway esté funcionando..."
                API_GATEWAY_URL=$(minikube service api-gateway --url || kubectl get service api-gateway -o jsonpath='{.spec.clusterIP}')
                curl -s $API_GATEWAY_URL:8080/actuator/health | grep "UP" || echo "API Gateway health check falló"
                '''
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo "¡Pipeline completado con éxito!"
        }
        failure {
            echo "Pipeline falló. Revisa los logs para más detalles."
        }
    }
}
