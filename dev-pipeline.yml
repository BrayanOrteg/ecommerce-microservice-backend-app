trigger:
  branches:
    include:
      - dev

pr: none

variables:
  azureSubscription: 'ecommerce-terraform-sc'
  dockerHubServiceConnection: 'ecommerce-docker'
  RESOURCE_GROUP: 'rg-dev'
  CLUSTER_NAME: 'aks-dev'
  K8S_MANIFEST_DIR: 'k8s/dev'
  IMAGE_TAG_SUFFIX: ':dev'
  COMPOSE_YML: 'compose.dev.yml'

pool:
  name: 'Default'

stages:
  - stage: Checkout
    displayName: 'Checkout Source Code'
    jobs:
      - job: CheckoutJob
        steps:
          - checkout: self
            displayName: 'Checkout repository'

  - stage: BuildProject
    displayName: 'Build Project with SonarQube Analysis'
    jobs:
      - job: BuildJob
        steps:
          - task: SonarCloudPrepare@3
            inputs:
              SonarQube: 'ecommerce-sonar-qube'
              organization: 'brayan-organization'
              scannerMode: 'other'
              extraProperties: |
                sonar.projectKey=brayan-organization_First-pipeline
                sonar.projectName=First pipeline

          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: true

  - stage: RunTests
    displayName: 'Run Unit and Integration Tests'
    dependsOn: BuildProject
    jobs:
      - job: TestJob
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: '**/site/jacoco/jacoco.xml'
              reportDirectory: '**/site/jacoco'
              codecoverageTool: 'jacoco'
            displayName: 'Publish Code Coverage Results'
            condition: succeededOrFailed()

  - stage: PushDockerImages
    displayName: 'Build, Test and Push Docker Images'
    dependsOn: RunTests
    jobs:
      - job: DockerJob
        steps:
          - task: Maven@4
            displayName: 'Build Maven Project'
            inputs:
              azureSubscription: 'ecommerce-terraform-sc'
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          - task: Docker@2
            displayName: 'Login to Docker Hub'
            inputs:
              containerRegistry: $(dockerHubServiceConnection)
              command: 'login'

          - script: |
              docker compose -f $(COMPOSE_YML) build
            displayName: 'Build Docker Images'

          - script: |
              echo "Installing Trivy..."
              sudo apt-get update
              sudo apt-get install -y wget apt-transport-https gnupg lsb-release
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
              echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
              sudo apt-get update
              sudo apt-get install -y trivy
              trivy --version
            displayName: 'Install Trivy'

          - script: |
              echo "Scanning Docker Images with Trivy..."
              declare -A service_images
              service_images["cloud-config-container"]="kenbra/cloud-config-ecommerce-boot"
              service_images["api-gateway-container"]="kenbra/api-gateway-ecommerce-boot"
              service_images["proxy-client-container"]="kenbra/proxy-client-ecommerce-boot"
              service_images["order-service-container"]="kenbra/order-service-ecommerce-boot"
              service_images["payment-service-container"]="kenbra/payment-service-ecommerce-boot"
              service_images["product-service-container"]="kenbra/product-service-ecommerce-boot"
              service_images["shipping-service-container"]="kenbra/shipping-service-ecommerce-boot"
              service_images["user-service-container"]="kenbra/user-service-ecommerce-boot"
              service_images["favourite-service-container"]="kenbra/favourite-service-ecommerce-boot"
              for service_name in "${!service_images[@]}"; do
                  image_name="${service_images[$service_name]}$(IMAGE_TAG_SUFFIX)"
                  echo "--- Scanning image: $image_name ---"
                  trivy image "$image_name" || echo "Trivy scan failed for $image_name but continuing pipeline..."
              done
            displayName: 'Scan Docker Images with Trivy'

          - script: |
              docker compose -f $(COMPOSE_YML) push
            displayName: 'Push Docker Images'

          - task: Docker@2
            displayName: 'Logout from Docker Hub'
            inputs:
              containerRegistry: $(dockerHubServiceConnection)
              command: 'logout'
            condition: succeededOrFailed()