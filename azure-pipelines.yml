trigger: none
pr: none

parameters:
  - name: profile
    displayName: 'Elige un perfil (prod / dev / stage)'
    type: string
    default: dev
    values:
      - dev
      - stage
      - prod

variables:
  azureSubscription: 'ecommerce-terraform-sc'
  dockerHubServiceConnection: 'ecommerce-docker'
  RESOURCE_GROUP: 'rg-${{ parameters.profile }}'
  CLUSTER_NAME: 'aks-${{ parameters.profile }}'
  K8S_MANIFEST_DIR: 'k8s/${{ parameters.profile }}'
  IMAGE_TAG_SUFFIX: ':${{ parameters.profile }}'
  COMPOSE_YML: 'compose.${{ parameters.profile }}.yml'
  E2E_BASE_URL: ''
  LOCUST_USERS: '10'
  LOCUST_SPAWN_RATE: '1'
  LOCUST_RUN_TIME: '30s'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Checkout
    displayName: 'Checkout Source Code'
    jobs:
      - job: CheckoutJob
        steps:
          - checkout: self
            displayName: 'Checkout repository'

  - stage: BuildProject
    displayName: 'Build Project with SonarQube Analysis'
    jobs:
      - job: BuildJob
        steps:
          - task: SonarCloudPrepare@3
            inputs:
              SonarQube: 'ecommerce-sonar-qube'
              organization: 'brayan-organization'
              scannerMode: 'other'
              extraProperties: |
                sonar.projectKey=brayan-organization_First-pipeline
                sonar.projectName=First pipeline

          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: true

  - stage: RunTests
    displayName: 'Run Unit and Integration Tests'
    dependsOn: BuildProject
    jobs:
      - job: TestJob
        steps:
          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'test'
              publishJUnitResults: true
              testResultsFiles: '**/surefire-reports/TEST-*.xml'
              codeCoverageToolOption: 'JaCoCo'
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false

          - task: PublishCodeCoverageResults@2
            inputs:
              summaryFileLocation: '**/site/jacoco/jacoco.xml'
              reportDirectory: '**/site/jacoco'
              codecoverageTool: 'jacoco'
            displayName: 'Publish Code Coverage Results'
            condition: succeededOrFailed()

  - stage: PushDockerImages
    displayName: 'Build, Test and Push Docker Images'
    dependsOn: RunTests
    jobs:
      - job: DockerJob
        steps:
          - task: Maven@4
            displayName: 'Build Maven Project'
            inputs:
              azureSubscription: 'ecommerce-terraform-sc'
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: false
          - task: Docker@2
            displayName: 'Login to Docker Hub'
            inputs:
              containerRegistry: $(dockerHubServiceConnection)
              command: 'login'

          - script: |
              docker compose -f $(COMPOSE_YML) build
            displayName: 'Build Docker Images'

          - script: |
              echo "Installing Trivy..."
              sudo apt-get update
              sudo apt-get install -y wget apt-transport-https gnupg lsb-release
              wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
              echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/trivy.list
              sudo apt-get update
              sudo apt-get install -y trivy
              trivy --version
            displayName: 'Install Trivy'

          - script: |
              echo "Scanning Docker Images with Trivy..."
              declare -A service_images
              service_images["cloud-config-container"]="kenbra/cloud-config-ecommerce-boot"
              service_images["api-gateway-container"]="kenbra/api-gateway-ecommerce-boot"
              service_images["proxy-client-container"]="kenbra/proxy-client-ecommerce-boot"
              service_images["order-service-container"]="kenbra/order-service-ecommerce-boot"
              service_images["payment-service-container"]="kenbra/payment-service-ecommerce-boot"
              service_images["product-service-container"]="kenbra/product-service-ecommerce-boot"
              service_images["shipping-service-container"]="kenbra/shipping-service-ecommerce-boot"
              service_images["user-service-container"]="kenbra/user-service-ecommerce-boot"
              service_images["favourite-service-container"]="kenbra/favourite-service-ecommerce-boot"
              for service_name in "${!service_images[@]}"; do
                  image_name="${service_images[$service_name]}$(IMAGE_TAG_SUFFIX)"
                  echo "--- Scanning image: $image_name ---"
                  trivy image "$image_name" || echo "Trivy scan failed for $image_name but continuing pipeline..."
              done
            displayName: 'Scan Docker Images with Trivy'

          - script: |
              docker compose -f $(COMPOSE_YML) push
            displayName: 'Push Docker Images'

          - task: Docker@2
            displayName: 'Logout from Docker Hub'
            inputs:
              containerRegistry: $(dockerHubServiceConnection)
              command: 'logout'
            condition: succeededOrFailed()

  - stage: DeployToAKS
    displayName: 'Deploy to AKS'
    dependsOn: PushDockerImages
    jobs:
      - job: DeployJob
        steps:
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_NAME) --overwrite-existing'
            displayName: 'Get AKS Credentials'

          - task: KubernetesManifest@1
            displayName: 'Deploy Zipkin'
            inputs:
              action: 'deploy'
              connectionType: 'azureResourceManager'
              azureSubscriptionConnection: $(azureSubscription)
              azureResourceGroup: $(RESOURCE_GROUP)
              kubernetesCluster: $(CLUSTER_NAME)
              namespace: 'default'
              manifests: '$(K8S_MANIFEST_DIR)/zipkin.yaml'

          - task: KubernetesManifest@1
            displayName: 'Deploy Service Discovery'
            inputs:
              action: 'deploy'
              connectionType: 'azureResourceManager'
              azureSubscriptionConnection: $(azureSubscription)
              azureResourceGroup: $(RESOURCE_GROUP)
              kubernetesCluster: $(CLUSTER_NAME)
              namespace: 'default'
              manifests: '$(K8S_MANIFEST_DIR)/service-discovery.yaml'

          - task: KubernetesManifest@1
            displayName: 'Deploy Cloud Config'
            inputs:
              action: 'deploy'
              connectionType: 'azureResourceManager'
              azureSubscriptionConnection: $(azureSubscription)
              azureResourceGroup: $(RESOURCE_GROUP)
              kubernetesCluster: $(CLUSTER_NAME)
              namespace: 'default'
              manifests: '$(K8S_MANIFEST_DIR)/cloud-config.yaml'

          - task: KubernetesManifest@1
            displayName: 'Deploy Every Service'
            inputs:
              action: 'deploy'
              connectionType: 'azureResourceManager'
              azureSubscriptionConnection: $(azureSubscription)
              azureResourceGroup: $(RESOURCE_GROUP)
              kubernetesCluster: $(CLUSTER_NAME)
              namespace: 'default'
              manifests: |
                $(K8S_MANIFEST_DIR)/api-gateway.yaml
                $(K8S_MANIFEST_DIR)/order-service.yaml
                $(K8S_MANIFEST_DIR)/payment-service.yaml
                $(K8S_MANIFEST_DIR)/product-service.yaml
                $(K8S_MANIFEST_DIR)/shipping-service.yaml
                $(K8S_MANIFEST_DIR)/user-service.yaml
                $(K8S_MANIFEST_DIR)/favourite-service.yaml
                $(K8S_MANIFEST_DIR)/proxy-client.yaml

          - bash: |
              echo "Attempting to get API Gateway Load Balancer IP..."
              API_GATEWAY_IP=""
              RETRY_COUNT=0
              MAX_RETRIES=12 # Retry for 12 * 10s = 120 seconds
              RETRY_INTERVAL=10

              while [ -z "$API_GATEWAY_IP" ] && [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
                API_GATEWAY_IP=$(kubectl get service api-gateway --namespace default -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
                if [ -z "$API_GATEWAY_IP" ]; then
                  RETRY_COUNT=$((RETRY_COUNT + 1))
                  echo "API Gateway IP not available yet. Retry $RETRY_COUNT/$MAX_RETRIES. Waiting $RETRY_INTERVAL seconds..."
                  sleep $RETRY_INTERVAL
                else
                  echo "API Gateway IP found: $API_GATEWAY_IP"
                  break
                fi
              done

              if [ -z "$API_GATEWAY_IP" ]; then
                echo "##vso[task.logissue type=error;]Failed to get API Gateway Load Balancer IP after $MAX_RETRIES retries."
                kubectl get service api-gateway --namespace default -o yaml # Print service details for debugging
                exit 1
              fi
              
              echo "Successfully retrieved API_GATEWAY_IP: $API_GATEWAY_IP"
              echo "##vso[task.setvariable variable=E2E_BASE_URL;isOutput=true]http://$API_GATEWAY_IP:8080"
            name: SetE2EVar
            displayName: 'Extract and Set API Gateway IP'

  - stage: OWASP
    displayName: 'Run OWASP Zap Scanner'
    dependsOn:
      - DeployToAKS
    variables:
      ZAP_TARGET_URL_FROM_DEPLOY: $[ stageDependencies.DeployToAKS.DeployJob.outputs['SetE2EVar.E2E_BASE_URL'] ]
    jobs:
      - job: OWASPJob
        steps:
          - script: |
              echo "Creating ZAP working directory..."
              mkdir -p $(System.DefaultWorkingDirectory)/owaspzap
              echo "Setting permissions for ZAP working directory..."
              sudo chmod -R 777 $(System.DefaultWorkingDirectory)/owaspzap
              echo "Pulling ZAP Docker image..."
              docker pull ghcr.io/zaproxy/zaproxy:stable
              echo "Running ZAP baseline scan against $(ZAP_TARGET_URL_FROM_DEPLOY)..."
              docker run --rm \
                -v $(System.DefaultWorkingDirectory)/owaspzap:/zap/wrk/:rw \
                ghcr.io/zaproxy/zaproxy:stable zap-baseline.py \
                -t $(ZAP_TARGET_URL_FROM_DEPLOY)/user-service/api/users \
                -J report.json -r report.html
              echo "ZAP scan finished. Reports are in $(System.DefaultWorkingDirectory)/owaspzap"
            displayName: 'Run OWASP ZAP Baseline Scan'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/owaspzap'
              ArtifactName: 'ZAPScanResults'
            displayName: 'Publish ZAP Scan Results'
            condition: succeededOrFailed()
          

  - stage: E2E
    displayName: 'Run E2E'
    dependsOn:
      - OWASP
      - DeployToAKS
    variables:
      E2E_BASE_URL_FOR_NEWMAN: $[ stageDependencies.DeployToAKS.DeployJob.outputs['SetE2EVar.E2E_BASE_URL'] ]
    jobs:
      - job: NewmanJob
        steps:
          - script: |
              echo "E2E_BASE_URL_FOR_NEWMAN in E2E stage is $(E2E_BASE_URL_FOR_NEWMAN)"
              if [ -z "$(E2E_BASE_URL_FOR_NEWMAN)" ] || [ "$(E2E_BASE_URL_FOR_NEWMAN)" == "http://:8080" ]; then
                echo "##vso[task.logissue type=error;]E2E_BASE_URL_FOR_NEWMAN is empty or invalid in E2E stage."
              fi
            displayName: 'Debug E2E Base URL in E2E Stage'
          - task: AzureCLI@2
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: 'az aks get-credentials --resource-group $(RESOURCE_GROUP) --name $(CLUSTER_NAME) --overwrite-existing'
          - script: |
              API_GATEWAY_IP=$(kubectl get service api-gateway --namespace default -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          - task: Npm@1
            inputs:
              command: 'custom'
              customCommand: 'install newman newman-reporter-htmlextra -g'
            displayName: 'Install Newman and htmlextra reporter'
          - task: NewmanPostman@4
            inputs:
              collectionSourceType: 'file'
              collectionFileSource: 'postman-collections/E2E-tests.postman_collection.json'
              environmentSourceType: 'none'
              globalVars: 'base_url=$(E2E_BASE_URL_FOR_NEWMAN)'
              reporters: 'htmlextra'
              htmlExtraDarkTheme: true
              htmlExtraLogs: true
              htmlExtraTestPaging: true
            displayName: 'Run Newman E2E Tests'

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(System.DefaultWorkingDirectory)/newman'
              ArtifactName: 'NewmanE2EReport'
            displayName: 'Publish Newman E2E Report'
            condition: succeededOrFailed()

  - stage: SonnarQubeAndBuild
    displayName: 'Build Project'
    jobs:
      - job: SonnarAndBuildJob
        steps:
          - task: SonarCloudPrepare@3
            inputs:
              SonarQube: 'ecommerce-sonar-qube'
              organization: 'brayan-organization'
              scannerMode: 'other'
              extraProperties: |
                sonar.projectKey=brayan-organization_First-pipeline
                sonar.projectName=First pipeline
          - task: Maven@4
            inputs:
              azureSubscription: 'ecommerce-terraform-sc'
              mavenPomFile: 'pom.xml'
              goals: 'clean package'
              options: '-DskipTests'
              publishJUnitResults: false
              javaHomeOption: 'JDKVersion'
              mavenVersionOption: 'Default'
              mavenAuthenticateFeed: false
              effectivePomSkip: false
              sonarQubeRunAnalysis: true

  - stage: Locust
    displayName: 'Run Locust'
    dependsOn:
      - E2E
      - DeployToAKS
    variables:
      LOCUST_HOST_URL_FROM_OUTPUT: $[ stageDependencies.DeployToAKS.DeployJob.outputs['SetE2EVar.E2E_BASE_URL'] ]
    jobs:
      - job: DebugAndRunLocustJob
        displayName: 'Debug Variables and Run Locust'
        steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '3.x'
              addToPath: true
            displayName: 'Use Python 3.x'

          - script: |
              python -m pip install --upgrade pip
              pip install locust
            displayName: 'Install Locust'

          - script: |
              echo "--- Locust Stage Variable Debugging ---"
              echo "Value of LOCUST_HOST_URL_FROM_OUTPUT (defined at Locust stage level): '$(LOCUST_HOST_URL_FROM_OUTPUT)'"
              echo "Value of LOCUST_USERS (pipeline variable): '$(LOCUST_USERS)'"
              echo "Value of LOCUST_SPAWN_RATE (pipeline variable): '$(LOCUST_SPAWN_RATE)'"
              echo "Value of LOCUST_RUN_TIME (pipeline variable): '$(LOCUST_RUN_TIME)'"
              echo "---------------------------------------"

              LOCAL_HOST_FOR_LOCUST_SCRIPT="$(LOCUST_HOST_URL_FROM_OUTPUT)"

              if [ -z "$LOCAL_HOST_FOR_LOCUST_SCRIPT" ] || [ "$LOCAL_HOST_FOR_LOCUST_SCRIPT" == "http://:8080" ]; then
                echo "##vso[task.logissue type=error;]LOCAL_HOST_FOR_LOCUST_SCRIPT is empty or invalid ('$LOCAL_HOST_FOR_LOCUST_SCRIPT') in Locust stage. Check stageDependencies syntax, names, and DeployToAKS stage logs."
                echo "Falling back to default host from locustfile.py, which will likely fail."
                # exit 1 # Consider failing the pipeline if the URL is not correctly propagated
              else
                echo "LOCUST_HOST_URL_FROM_OUTPUT is valid. Proceeding with value: '$LOCAL_HOST_FOR_LOCUST_SCRIPT'"
              fi
              
              echo "Current directory before cd: $(pwd)"
              # Ensure the 'locust' directory is directly under the root of the checkout
              if [ -d "$(Build.SourcesDirectory)/locust" ]; then
                cd "$(Build.SourcesDirectory)/locust"
                echo "Current directory after cd: $(pwd)"
                echo "Contents of locust directory:"
                ls -la
              else
                echo "##vso[task.logissue type=error;]Locust directory not found at $(Build.SourcesDirectory)/locust"
                exit 1
              fi
              
              export LOCUST_HOST="$LOCAL_HOST_FOR_LOCUST_SCRIPT"
              echo "LOCUST_HOST environment variable will be set to: '$LOCUST_HOST' for locust execution"
              
              echo "Executing Locust..."
              python3 -m locust -f locustfile.py \
                --headless \
                -u $(LOCUST_USERS) \
                -r $(LOCUST_SPAWN_RATE) \
                -t $(LOCUST_RUN_TIME) \
                --csv=load_test_report \
                --html=load_test_report.html
              
              echo "Locust execution finished. Checking for report files in $(pwd):"
              ls -la
            displayName: 'Debug and Run Locust Test'
            
          - task: PublishBuildArtifacts@1
            displayName: 'Publish Locust HTML Report'
            inputs:
              pathToPublish: '$(Build.SourcesDirectory)/locust/load_test_report.html' 
              artifactName: 'LocustReportHTML'
              publishLocation: 'Container'
            condition: always()
